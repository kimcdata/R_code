net.threshold <- function (strength, method = "l1",other=c(-0.1,-0.2),verbose=F){
    e = ecdf(strength)
    u = knots(e)
    if (method == "l1") {
        norm = function(p) sum(diff(unique(c(0, u, 1))) * abs(e(unique(c(0, u[u < 1]))) - p))
    }
    p0 = optimize(f = norm, interval = c(0, 1))$minimum
    if (norm(1) < norm(p0)) 
        p0 = 1
    if (norm(0) < norm(p0)) 
        p0 = 0
if(verbose)
print(p0)
    quants <- c(p0,p0+other)
res <- quantile(strength, quants, type = 1, names = FALSE)
names(res) <- paste(round(100-((c(1,1+other))*100),2),"%",sep="")
return(res)
}
ecdf
knot
knots
optimize
net.threshold <- function (strength, method = "l1",other=c(-0.1,-0.2),verbose=F){
    e = ecdf(strength)
    u = knots(e)
    if (method == "l1") {
        norm = function(p) sum(diff(unique(c(0, u, 1))) * abs(e(unique(c(0, u[u < 1]))) - p))
    }
    p0 = optimize(f = norm, interval = c(0, 1))$minimum
    if (norm(1) < norm(p0)) 
        p0 = 1
    if (norm(0) < norm(p0)) 
        p0 = 0
if(verbose)
print(p0)
    quants <- c(p0,p0+other)
res <- quantile(strength, quants, type = 1, names = FALSE)
names(res) <- paste(round(100-((c(1,1+other))*100),2),"%",sep="")
return(res)
readClipboard() -> ed
net.threshold(ed)
as.numeric(ed) -> ed
ed
as.numeric(ed) -> ed
net.threshold(ed)
net.threshold(abs(ed))
net.threshold(ed, other=c(seq(-0.4, 0, by=0.05)))
net.threshold(ed, other=c(seq(0,-0.4 by=0.05)))
net.threshold(ed, other=c(seq(0,-0.4,by=-0.05)))
net.threshold(ed, other=c(seq(0,-0.4,by=-0.01)))
as.numeric(readClipboard())
as.numeric(readClipboard()) -> ed
net.threshold(ed, other=c(seq(0,-0.4,by=-0.01)))
as.numeric(readClipboard()) -> ed
net.threshold(ed, other=c(seq(0,-0.4,by=-0.01)))
as.numeric(readClipboard()) -> ed
net.threshold(ed, other=c(seq(0,-0.4,by=-0.01)))
as.numeric(readClipboard()) -> ed
net.threshold(ed, other=c(seq(0,-0.4,by=-0.01)))
as.numeric(readClipboard()) -> ed
ed
net.threshold <- function (strength, method = "l1",other=c(-0.1,-0.2),verbose=F){
    e = ecdf(strength)
    u = knots(e)
    if (method == "l1") {
        norm = function(p) sum(diff(unique(c(0, u, 1))) * abs(e(unique(c(0, u[u < 1]))) - p))
    }
    p0 = optimize(f = norm, interval = c(0, 1))$minimum
    if (norm(1) < norm(p0)) 
        p0 = 1
    if (norm(0) < norm(p0)) 
        p0 = 0
if(verbose)
print(p0)
    quants <- c(p0,p0+other)
res <- quantile(strength, type = 1, names = FALSE)
#names(res) <- paste(round(100-((c(1,1+other))*100),2),"%",sep="")
return(res)
}
net.threshold(ed, other=c(seq(0,-0.4,by=-0.01)))
ed
na.omit(ed) -> ed.na
net.threshold(ed.na, other=c(seq(0,-0.4,by=-0.01)))
net.threshold <- function (strength, method = "l1",other=c(-0.1,-0.2),verbose=F){
    e = ecdf(strength)
    u = knots(e)
    if (method == "l1") {
        norm = function(p) sum(diff(unique(c(0, u, 1))) * abs(e(unique(c(0, u[u < 1]))) - p))
    }
    p0 = optimize(f = norm, interval = c(0, 1))$minimum
    if (norm(1) < norm(p0)) 
        p0 = 1
    if (norm(0) < norm(p0)) 
        p0 = 0
if(verbose)
print(p0)
    quants <- c(p0,p0+other)
print(quants)
res <- quantile(strength, type = 1, names = FALSE)
#names(res) <- paste(round(100-((c(1,1+other))*100),2),"%",sep="")
return(res)
}
net.threshold(ed.na, other=c(seq(0,-0.4,by=-0.01)))
ed.na
ed.na -> strength
e = ecdf(strength)
str(e)
u = knots(e)
str(u)
norm = function(p) sum(diff(unique(c(0, u, 1))) * abs(e(unique(c(0, u[u < 1]))) - p))
p0 = optimize(f = norm, interval = c(0, 1))
p0
strength
e = ecdf(abs(strength))
u = knots(e)
p0 = optimize(f = norm, interval = c(0, 1))
p0
str(u)
plot(density(strength))
plot(density(abs(strength)))
net.threshold <- function (strength, method = "l1",other=c(-0.1,-0.2),verbose=F){
    e = ecdf(strength)
    u = knots(e)
    if (method == "l1") {
        norm = function(p) sum(diff(unique(c(0, u, 1))) * abs(e(unique(c(0, u[u < 1]))) - p))
    }
    p0 = optimize(f = norm, interval = c(0, 1))$minimum
    if (norm(1) < norm(p0)) 
        p0 = 1
    if (norm(0) < norm(p0)) 
        p0 = 0
if(verbose)
print(p0)
    quants <- c(p0,p0+other)
res <- quantile(strength, quants, type = 1, names = FALSE)
names(res) <- paste(round(100-((c(1,1+other))*100),2),"%",sep="")
return(res)
}
net.threshold(abs(strength))
net.threshold(abs(strength))$'10%
net.threshold(abs(strength))$`10%
net.threshold(abs(strength))$"10%"
net.threshold(abs(strength))$'10%'
net.threshold(abs(strength))
net.threshold(abs(strength))[2
]
net.threshold(abs(strength))
net.threshold(abs(strength),other=c(0,-0.2))
net.threshold(abs(strength),other=c(0,-0.05,-0.1,-0.15,-0.2))
net.threshold(abs(strength),other=c(-0.05,-0.1,-0.15,-0.2))
net.threshold(abs(strength),other=c(-0.01,-0.05,-0.1,-0.15,-0.2))
net.threshold(abs(strength),other=c(-0.01,-0.05,-0.1,-0.15,-0.2)) -> vec
findInterval(abs(strength), vec)
findInterval(abs(strength), rev(vec))
abs(strength)[1:10]
findInterval(abs(strength), rev(vec),rightmost.closed=TRUE)
?findInterval
strength
findInterval(abs(strength), rev(vec),rightmost.closed=TRUE)
findInterval(abs(strength), rev(vec))
findInterval(abs(strength), rev(vec)) -> sig
case
?case
case(sig)
case(sig, 0-6)
case(sig, 0=6)
case(sig, "0"=6)
case(sig, "0"=6, "1"=5)
case(sig, "0"=6, "1"=5, "5"=4, "10"=3, "15"=2, "20"=1, "100"=0)
sapply(fh.l, function(x){
ed <- as.numeric(x[,3])
vec <- net.threshold(abs(ed),other=c(-0.01,-0.05,-0.1,-0.15,-0.2))
sig <- findInterval(abs(ed), rev(vec))
sig <- case(sig, "0"=6, "1"=5, "5"=4, "10"=3, "15"=2, "20"=1, "100"=0)
return(sig)
}) -> test
ls()
